name: Deploy Ghost CMS

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  security-events: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.1 
      
      - name: Setup Terraform Backend
        run: |
          # Create S3 bucket for state if it doesn't exist
          aws s3api create-bucket --bucket ghost-terraform-state-bucket-devsec --region us-east-1
          
          aws s3api put-bucket-versioning --bucket ghost-terraform-state-bucket-devsec --versioning-configuration Status=Enabled
          
          # Create DynamoDB table for state locking if it doesn't exist
          aws dynamodb create-table \
            --table-name ghost-terraform-locks \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region us-east-1 || true
  
      - name: Terraform Init
        working-directory: ./infra
        run: terraform init
      
      - name: Terraform Apply
        working-directory: ./infra
        run: terraform apply -auto-approve

  semgrep-sast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Semgrep
        run: |
          python3 -m pip install semgrep
  
      - name: Run Semgrep (Terraform rules)
        run: |
          semgrep --config p/terraform --sarif --output results.sarif || true
  
      - name: Debug - List Files
        run: ls -l
  
      - name: Upload SARIF Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

      - name: Notify Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: "Semgrep found ${{ steps.semgrep.outcome }} issues. Check GitHub for details."
          # SLACK_FILE_UPLOAD: results.sarif